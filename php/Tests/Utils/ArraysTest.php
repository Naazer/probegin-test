<?php

namespace Utils;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-11-28 at 13:50:45.
 */
class ArraysTest extends \PHPUnit\Framework\TestCase
{

	/**
	 * @var Arrays
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new Arrays();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{

	}

	/**
	 * Provides test data for success test case
	 * @return type
	 */
	public function dataFindPair_Success()
	{
		return [
			[[1, 6], [1, 2, 3, 4, 5, 6, 7, 8], 7],
			[[3, 4], [8, 3, 4, 5, 6, 7, 8, 1], 7],
			[[8, 0], [8, 3, 4, 5, 6, 7, 8, 0], 8],
			[[1, 5], [1, 2, 3, 4, 5, 6, 7, 8], 6],
			[[0, 0], [0, 2, 0, 4, 5, 0, 7, 0], 0]
		];
	}

	/**
	 * Provides test data for failure test case
	 * @return type
	 */
	public function dataFindPair_Failure()
	{
		return [
			[[1, 7], [1, 2, 3, 4, 5, 6, 7, 8], 7],
			[[3, 2], [8, 3, 4, 5, 6, 7, 8, 1], 7],
			[[8, 8], [1, 2, 3, 4, 5, 6, 7, 8, 0], 8],
			[false, [1, 2, 3, 4, 5, 6, 7, 8], 6],
			[[3, 4], [0, 2, 0, 4, 5, 0, 7, 0], 0]
		];
	}

	/**
	 * Provides test data for 'false' test case
	 * @return type
	 */
	public function dataFindPair_False()
	{
		return [
			[[1, 2, 3, 4, 5, 6, 7, 8], 1],
			[[8, 3, 4, 5, 6, 7, 8, 1], 233],
			[[1, 2, 3, 4, 5, 6, 7, 8, 0], 0],
			[[1, 2, 2, 9, 8, 2, 3, 2], 7],
			[[0, 2, 0, 4, 5, 0, 7, 0], 1]
		];
	}


	/**
	 * Provides test data for 'false' test case
	 * @return type
	 */
	public function dataFindPair_TypeError()
	{
		return [
			[[8, 3, 4, 5, 6, 7, 8, 1], new \stdClass()], // object as the sum
			['1, 2, 3, 4, 5, 6, 7, 0', 0], // String instead of an array as an argument
			[[1, 2, 2, 9, 8, 2, 3, 2], [2,7]], // array instead of int for sum
			[[0, 2, 0, 4, 5, 0, 7, 0], 'wew'] // non-numeric string as the sum
		];
	}



	/**
	 * Provides test data for 'false' test case
	 * @return type
	 */
	public function dataFindPair_DomainException()
	{
		return [
			[[1, 2, 3, [4, 5], 6, 7, 8], 1], // array as an element of the data array
			[[1,2,'z'], 2], // string in the array
			[[1,2,3], -2]  // negative sum
		];
	}


	/**
	 * Test data should have the matching figures
	 * @covers Arrays::findPair
	 * @dataProvider dataFindPair_Success
	 * @param array $exp Expected result
	 * @param array $data Search array
	 * @param int $sum Sum to find pair for
	 */
	public function testFindPair_Success($exp, $data, $sum)
	{
		$this->assertEquals($exp, $this->object->setValue($data)->findPair($sum));
	}

	/**
	 * Expected result is different
	 * @covers Arrays::findPair
	 * @dataProvider dataFindPair_Failure
	 * @param array $exp Expected result
	 * @param array $data Search array
	 * @param int $sum Sum to find pair for
	 */
	public function testFindPair_Failure($exp, $data, $sum)
	{
		$this->assertNotEquals($exp, $this->object->setValue($data)->findPair($sum));
	}



	/**
	 * Test data must not have the matching numbers, a false result is expected
	 * @covers Arrays::findPair
	 * @dataProvider dataFindPair_False
	 * @param array $data Search array
	 * @param int $sum Sum to find pair for
	 */
	public function testFindPair_False($data, $sum)
	{
		$this->assertFalse($this->object->setValue($data)->findPair($sum));
	}

	/**
	 * Test for invalid test data
	 * @covers Arrays::findPair
	 * @dataProvider dataFindPair_TypeError
	 * @param array $data Search array
	 * @param int $sum Sum to find pair for
	 * @expectedException \TypeError
	 */
	public function testFindPair_TypeError($data, $sum)
	{
		$this->expectException(\TypeError::class);
		$this->object->setValue($data)->findPair($sum);
	}


	/**
	 * Test for invalid test data
	 * @covers Arrays::findPair
	 * @dataProvider dataFindPair_DomainException
	 * @param array $data Search array
	 * @param int $sum Sum to find pair for
	 * @expectedException \DomainException
	 */
	public function testFindPair_DomainException($data, $sum)
	{
		$this->expectException(\DomainException::class);
		$this->object->setValue($data)->findPair($sum);
	}
}
